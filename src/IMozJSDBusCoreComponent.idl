/*
 * IMozJSDBusCoreComponent.idl: 
 *
 * Authors:
 *   Eric Butler <eric@codebutler.com>
 *
 *  This file is part of mozjs-dbus.
 *
 *  mozjs-dbus is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  mozjs-dbus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with mozjs-dbus.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include "nsISupports.idl"
#include "nsIPropertyBag.idl"
#include "nsIArray.idl"

[function, scriptable, uuid(7287d9ec-1a4b-40c5-9e6e-2a79dde63f60)]
interface IJSCallback : nsISupports
{
  nsIVariant method(in string interfaceName,
                    in string memberName,
                    [array, size_is(argsLength)]
                    in nsIVariant args,
                    in unsigned long argsLength);
};

[scriptable, uuid(38a1b10b-e4ff-4cb3-b389-c11d00ddacc3)]
interface IMozJSDBusCoreComponent : nsISupports
{
  const PRUint16 SYSTEM_BUS  = 1;
  const PRUint16 SESSION_BUS = 2;

  nsIVariant CallMethod(in PRUint16 aBusType,
                        in AUTF8String aServiceName,
                        in AUTF8String aObjectPath,
                        in AUTF8String aInterfaceName,
                        in AUTF8String aMethodName,
                        in unsigned long aArgsLength,
                        [array, size_is(aArgsLength)]
                        in nsIVariant aArgs,
                        in IJSCallback aCallback);

  void EmitSignal(in PRUint16 aBusType,
                  in AUTF8String aObjectPath,
                  in AUTF8String aInterfaceName,
                  in AUTF8String aSignalName,
                  in unsigned long aArgsLength,
                  [array, size_is(aArgsLength)]
                  in nsIVariant aArgs);

  unsigned long ConnectToSignal(in PRUint16 aBusType,
                                in AUTF8String aServiceName,
                                in AUTF8String aObjectPath,
                                in AUTF8String aInterfaceName,
                                in AUTF8String aSignalName,
                                in IJSCallback aCallback);

  void DisconnectFromSignal(in PRUint16 aBusType,
                            in unsigned long aId);

  boolean RequestService(in PRUint16 aBusType,
                         in AUTF8String aServiceName);
  
  void RegisterObject(in PRUint16 aBusType,
                      in AUTF8String aObjectPath,
                      in IJSCallback aCallback);

  void UnregisterObject(in PRUint16 aBusType,
                        in AUTF8String aObjectPath);
                        
  nsIArray SplitSignature(in AUTF8String aSignature);
};

[scriptable, uuid(d987be60-54ac-012d-e4ff-64b9e8be7216)]
interface IMozJSDBusObjectPath : nsISupports
{
    attribute AUTF8String path;
};
